* Overview of the Program

The basic game structure is that the game is represented in an integer array. Positions 0 - 5 represent the top row of houses, position 6 represents the first player's store. Positions 7-12 represent the bottom row of houses, and position 13 represents the second player's store.

The results of our 1000 games were -

AI 1 - Helen & Amar's -
AI 2 - Sam & Andrew's - 

* MASH Algorithm - By Sam and Andrew

This is the algorithm and AI constructed by Sam and Andrew, which can be found in MASH.java.

** Basis of the Algorithm

We based our algorithm largely on the M&N algorithm - an improement on the mini-max algorithm. We chose this as it has been greatly successful in the past, and an AI written in Lisp utilising this algorithm has won tournaments with other AI based on other algorithms before. In short, the M&N algorithm has been found to perform significantly better than a base mini-max algorithm.

We found a PDF on the M&N algorithm here - http://dl.acm.org/citation.cfm?id=362054 and though it was originally written in Common Lisp, we took the ideas of the M&N algorithm, namely that a min-max algorithm should pick from a few options and take into account relative uncertainty (especially considering the fact that algorithms for this task are designed to learn) - therefore we can't be certain as to whether the opposing AI will modify their moves using what they've learnt (potentially from how our AI plays) from the last game(s).

We also took some inspiration from Artificial Intelligence: A Modern Approach, pages 480 - 483, and applied its comments on reasoning under uncertainty to our implementation of the M&N algorithm. We felt it would be prudent, when against any decent learning algorithm, to consider uncertainty when we are unsure, indeed, what move the opposing AI will choose, and whether they will have adapted their efforts from last time.

** Analysis of Behaviour

We expected our algorithm to,

Our algorithm
